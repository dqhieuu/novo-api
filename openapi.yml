openapi: 3.0.2
info:
  title: Novo App
  version: '1.0'
  description: >-
    A book server that serves all kinds of books (novels, comics, manga and
    whatnots)
  contact: {}
servers:
  - url: 'http://localhost:7001'
paths:
  '/oauth/{provider}':
    get:
      summary: OAuth login initialize
      description: Redirects client to OAuth provider page for 3-legged authentication.
      responses:
        '302':
          description: Redirect to the provider page
        '404':
          description: Provider not found
      tags:
        - Users
      parameters:
        - name: provider
          in: path
          required: true
          description: The provider of the OAuth service.
          schema:
            $ref: '#/components/schemas/OauthProvider'
      operationId: goToOauthProvider
      security: []
      
  /login:
    get:
      summary: OAuth login
      security: []
      description: >
        Client goes to this page after having received the oauth code from
        provider (Google). It's performed automatically.
      parameters:
        - name: provider
          in: query
          required: true
          description: The provider of the OAuth service.
          schema:
            type: string
            enum:
              - google
        - name: code
          in: query
          required: true
          description: >
            Code received after the client has successfully been verified by the OAuth
            provider side. (Embedded in the redirect link)
          schema:
            type: string
      responses:
        '200':
          description: Login success
        '401':
          description: Invalid credentials
        '404':
          description: Provider not found
      tags:
        - Users
      operationId: loginByPassword
    post:
      summary: Password login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [usernameOrEmail, password]
              properties:
                usernameOrEmail:
                  type: string
                  example: Người dùng X
                  minLength: 6
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: Successful login
        '401':
          description: Invalid credentials
      tags:
        - Users
      parameters: []
      operationId: loginByOAuthCode
  /book:
    post:
      summary: Create a new book group
      description: Create a new book group by json request body.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: One punch Man
                  description: The name of this book group. Must not contain line break characters and control characters.
                description:
                  type: string
                  description: The book summary. Must not contain control characters.
                  example: The story of a hero named Saitama.
                authors:
                  type: array
                  example: [123, 124, 125]
                  description: Author IDs from the database. Accepts everything, but will only save non duplicates and valid author ids.
                  items: 
                    type: integer
                coverArts:
                  type: array
                  example: [123, 124, 125]
                  description: Image IDs from the database. The last valid one will be selected as the cover thumbnail 
                    if the primaryCoverArt is not set (in case this field has valid values).
                  items: 
                    type: integer
                genres:
                  type: array
                  description: Genre IDs of this book. Accepts everything, but will only save non duplicates and valid ones.
                  example: [2,3,5]
                  items:
                    type: integer
                primaryCoverArt:
                  type: integer
                  example: 1234
                  description: Must be one of the cover arts. No passing will automatically fall back to the last cover art of `coverArts`, if `coverArts` has valid values.
                  items: 
                    type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: The book group id after created
                properties:
                  id:
                    type: integer
                    example: 1231
        403:
          description: User not authorized
      tags: [Book Groups]
  /book/{bookGroupId}:
    get:
      summary: Get book group page content
      description: Create a new book group by json request body.
      tags:
        - Book Groups
        
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: One punch Man
                    description: The name of this book group
                  description:
                    type: string
                    example: The story of a hero named Saitama.

                  views:
                    example: 1245
                    type: integer
                    description: Number of views from all chapters of this book. Being on this page doesn't count in the total views.
                  likeCount:
                    type: integer
                    example: 3
                  dislikeCount:
                    type: integer
                    example: 0
                  authors:
                    type: array
                    items:
                      type: object
                      required:
                        - name
                        - url
                      properties:
                        name:
                          type: string
                          example: Nguyễn Nhật Ánh
                        id:
                          type: integer
                          description: Author id
                          example: 1231
                  genres:
                    type: array
                    description: Genre ids and names of this book.
                    items: 
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1231
                        name:
                          type: string
                          example: Tình cảm
                  chapters:
                    type: array
                    items:
                      type: object
                      properties:
                        chapterNumber:
                          type: number
                          example: 12.1
                        description:
                          type: string
                          example: This chapter title or something
                        id:
                          type: integer
                          description: Chapter id
                          example: 1231

                  coverArts:
                    type: array
                    items: 
                      type: object
                      required:
                        - thumbnail
                        - originalImage
                      properties:
                        thumbnail:
                          type: string
                          example: /image/author-s/a1241-4a43-4a.jpg
                        originalImage:
                          type: string
                          example: /image/author/515-133-22.jpg
                  primaryCoverArt:
                      type: object
                      required:
                        - thumbnail
                        - originalImage
                      properties:
                        thumbnail:
                          type: string
                          example: /image/author-s/a1241-4a43-4a.jpg
                        originalImage:
                          type: string
                          example: /image/author/515-133-22.jpg

        404:
          description: Book group not found
    delete:
      summary: Delete a book group
      description: Delete a book group by its id. Will delete all containing book chapters.
      parameters:
        - name: bookGroupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Deleted OK
        403:
          description: User not authorized
        404:
          description: Book group not found
      tags:
        - Book Groups

  '/search-suggest/{query}':
    get:
      summary: Search suggestion
      description: Suggestion when typing text in the search box.
      parameters:
        - name: query
          in: path
          required: true
          schema:
            type: string
            example: solo lev
            maxLength: 100
      security: []
      responses:
        '200':
          description: A list of book may contain 0 elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    description: A suggestion list of books when searching.
                    items:
                      type: object
                      properties:
                        thumbnail:
                          description: A small-sized thumbnail
                          type: string
                          example: /image/cover-art/anh.jpg
                        title:
                          type: string
                          description: Book title
                          example: Boku no pico
                        id:
                          type: integer
                          description: Book group id
                          example: 1231
                        latestChapter:
                          type: number
                          description: The highest number chapter
                          example: 16.5
      tags:
        - Book Groups
      operationId: searchSuggestion
  '/search/{query}':
    get:
      summary: Search result
      description: Result page containing book groups after hitting enter.
      parameters:
        - name: query
          in: path
          required: true
          schema:
            type: string
            example: solo leveling
        - name: page
          $ref: '#/components/parameters/Page'
      operationId: getSearchResult
      security: []
      responses:
        200:
          description: Query success
          content:
            application/json:
              schema:
                type: object
                properties:
                  lastPage:
                    $ref: '#/components/schemas/LastPage'
                  books:
                    type: array
                    description: Books in a dedicated search page
                       have more information than when searching.
                    items:
                      $ref: '#/components/schemas/BookItemFull'

      tags:
        - Book Groups
  '/chapter/{chapterId}':
    get:
      summary: Get chapter page content
      description: |-
        All necessary content for displaying a chapter page.
        There are links to the previous and next chapter
      parameters:
        - name: chapterId
          in: path
          required: true
          schema:
            type: string
          description: Id of a chapter from the database
      operationId: getChapterByChapterId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      type:
                        type: string
                        example: images
                        enum:
                          - images
                      images:
                        type: array
                        description: A list of image urls
                        items:
                          type: string
                      name:
                        type: string
                        example: A story of rain
                      nextChapter:
                        description: Id of the next book chapter
                        type: integer
                        example: 1214
                      prevChapter:
                        description: Id of the next book chapter
                        type: integer
                        example: 1211
                    required:
                      - type
                      - images
                  - type: object
                    required:
                      - type
                      - textContent
                    properties:
                      type:
                        type: string
                        example: hypertext
                        enum:
                          - hypertext
                      textContent:
                        type: string
                        example: Call me Ishmael. Some years ago...
                        description: The content for a text chapter (may contain markdown formattting)
                      name:
                        type: string
                        example: A story of rain
                      nextChapter:
                        description: Id of the next book chapter
                        type: integer
                        example: 1214
                      prevChapter:
                        description: Id of the next book chapter
                        type: integer
                        example: 1211
        404:
          description: Chapter not found
      security: []
      tags:
        - Book Chapters
  /auth/chapter/images:
    post:
      summary: Post a new chapter (images type)
      description: A new `images` type book chapter to be posted, must belong to a book group.
      parameters: []
      operationId: postNewChapterImages
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: The chapter id after created
                properties:
                  id:
                    type: integer
                    example: 1231
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                required:
                  - bookGroupId
                  - chapterNumber
                  - images
                properties:
                  bookGroupId:
                    type: integer
                    example: 25
                  name:
                    type: string
                    example: A story of rain
                  chapterNumber:
                    type: number
                    example: 6.8
                  images:
                    description: IDs of images after uploaded to the server. Order matters!
                    type: array
                    items:
                      type: integer
      tags:
        - Book Chapters
  /auth/chapter/hypertext:
    post:
      summary: Post a new chapter (hypertext type)
      description: A new `hypertext` type book chapter to be posted, must belong to a book group.
      parameters: []
      operationId: postNewChapterHypertext
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: The chapter id after created
                properties:
                  id:
                    type: integer
                    example: 1231
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                required:
                  - bookGroupId
                  - chapterNumber
                  - textContent
                properties:
                  bookGroupId:
                    type: integer
                    example: 25
                  name:
                    type: string
                    example: A story of rain
                  chapterNumber:
                    type: number
                    example: 6.8
                  textContent:
                    description: The hypertext content of the chapter.
                    type: string
                    example: "Some book content. Once upon..."
      tags:
        - Book Chapters
    delete:
      summary: Delete a book chapter
      description: ''
      parameters:
        - name: chapterId
          in: path
          schema:
            type: number
          required: true
      operationId: deleteChapterByChapterId
      responses:
        '200':
          description: Deleted successfully
        '403':
          description: User not authorized
        '404':
          description: Book chapter not found
      tags:
        - Book Chapters
    # patch:
    #   summary: Update book chapter content
    #   description: ''
    #   parameters: []
    #   operationId: updateChapterByChapterId
    #   responses:
    #     default:
    #       description: Default response
    #   tags:
    #     - Book Chapters
  '/like/{bookGroupId}':
    get:
      summary: Get like count of a book group
      description: This gets the like and dislike count of a book group
      parameters:
        - name: bookGroupId
          in: path
          required: true
          schema:
            type: integer
      security: []
      operationId: getLikeAndDislikeCountByBookGroupId
      responses:
        200:
          description: Successful get
          content:
            application/json:
              schema:
                type: object
                required:
                  - likeCount
                  - dislikeCount
                properties:
                  likeCount:
                    type: integer
                    example: 3
                  dislikeCount:
                    type: integer
                    example: 0
        404:
          description: Book group not found


      tags:
        - Book Groups
  /like/{bookGroupId}/{operation}:
    post:
      summary: Like operations on a book group
      description: Like/dislike/or unlike operation by a user for a book group
      parameters:
        - name: bookGroupId
          in: path
          required: true
          schema:
            type: integer
        - name: operation
          in: path
          required: true
          schema:
            enum: [like, dislike, unlike]
            example: like
            type: string
      operationId: likeOperationsForBookGroup
      responses:
        200:
          description: OK
        403:
          description: User not authorized
        404:
          description: Book group not found
      tags:
        - Book Groups
  /comment:
    get:
      summary: Get comments from a book group/chapter
      description: >-
        Contains all comments from chapters in this group and comments not in any chapter (book-group scope comments)
      parameters:
        - $ref: '#/components/parameters/BookGroupId'
        - $ref: '#/components/parameters/BookChapterId'
        - $ref: '#/components/parameters/Page'
      operationId: getCommentsByBookGroupOrChapterId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - likeCount
                  - dislikeCount
                properties:
                  lastPage:
                    $ref: '#/components/schemas/LastPage'
                  comments:
                    type: array
                    items:
                      type: object
                      properties:
                        comment:
                          description: Content of a comment
                          type: string
                          example: Bình luận gì đó...
                        userName:
                          type: string
                        id:
                          type: integer
                          description: Id of user profile
                          example: 1231
                        userAvatar:
                          type: string
                          description: Url of user's avatar (small thumbnail)
                          example: /user-avatar/2a82c91-12c-132131aba30.jpg
                        timePosted:
                          description: Timestamp of comment when created
                          type: integer
                          example: 1231111111
        404:
          description: Book group/chapter not found
      tags:
        - Book Comments
  /auth/comment:
    post:
      summary: Post a comment in a book group/chapter
      description: Create a comment that isn't chapter specific
      parameters:
        - name: bookGroupId
          in: query
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/BookChapterId'
      operationId: postCommentByBookGroupId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
                  description: The content of the comment to be posted. length <= 10 <= 500. Contains no more than 2 consecutive line breaks
                  example: Test thử comment cái
      responses:
        '200':
          description: Posted successfully
        '403':
          description: User not authorized
        '404':
          description: Book group/chapter not found
      tags:
        - Book Comments
  /auth/comment/${commentId}:
    delete:
      summary: Delete a book comment
      description: Delete a comment by its id
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      operationId: deleteCommentById
      responses:
        '200':
          description: Deleted successfully
        '403':
          description: User not authorized
        '404':
          description: Could't find comment
      tags:
        - Book Comments
    patch:
      summary: Update a book comment
      description: Update a comment by its id
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
                  description: The modified comment content. 
                  example: Cập nhật comment
      operationId: updateCommentById
      responses:
        '200':
          description: Updated successfully
        '403':
          description: User not authorized
        '404':
          description: Could't find comment
      tags:
        - Book Comments
  /register:
    post:
      summary: Register a new user (password)
      description: Register a new user with password, username, and email. An alternative workflow 
        is that user signs up/logs in with their account from an OAuth provider.
      parameters: []
      operationId: registerANewUser
      security: []
      responses:
        200:
          description: Created successfully
        422:
          description: Invalid user data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Must be at least 6 characters, not starting with a space, may contain at most 1 white space between characters, may contain special characters except control characters and line break characters
                  example: Người dùng W1B00 ／人 ◕ ‿‿ ◕ 人＼
                email:
                  type: string
                  example: example@example.com
                  description: Standards compliant
                password:
                  type: string
                  description: Must be at least 8 characters
                  example: A!B2Ce%%
              required: [username, email, password]
      tags:
        - Users
  /auth/complete-oauth-register:
    post:
      summary: Complete OAuth registration
      description:
        User types in their username and maybe changes their default profile picture
        to complete registration
      parameters: []
      operationId: completeOauthRegister
      responses:
        200:
          description: OAuth user account officially created
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  $ref: '#/components/schemas/Username'
                avatar:
                  type: integer
                  description: An image id from the database
      tags:
        - Users
  /user/{userId}:
    get:
      summary: Get public user info page
      description: Get public user info to be displayed in user page (i.e., username, books posted, profile, avatar )
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      security: []
      operationId: getUserInfoById
      responses:
        200:
          description: Found user
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                  - role
                  - booksPosted
                properties:
                  name:
                    type: string
                    example: Người dùng ABC
                  role:
                    $ref: '#/components/schemas/UserRole'
                  avatar:
                    type: string
                    description: Url of avatar
                    example: /avatar/2a82c91-12c-132131aba30.jpg
                  description:
                    type: string
                    example: Mô tả người dùng...
                  booksPosted:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookItem'
      tags:
        - Users
  /auth/role:
    get:
      summary: Get my role permissions
      description: Get role permissions, even if user is not logged in
      parameters: []
      operationId: getMyRolePermissions
      responses:
        200:
          description: Role list
          content:
            application/json:
              schema:
                type: object
                required:
                  - role
                  - permissions
                properties:
                  role:
                    $ref: '#/components/schemas/UserRole'
                  permissions:
                    $ref: '#/components/schemas/RolePermissions'
      tags:
        - Users
  /auth/author:
    post:
      summary: Create a new author
      description: 'A complete author page, with books from author'
      parameters: []
      operationId: createAuthor
      responses:
        200:
          description: Created successfully
          content:
            application/json:
              schema:
                type: object
                description: The author id after inserting from the database
                properties:
                  id:
                    type: integer
                    example: 1231

        403:
          description: User not authorized
        409:
          description: Author already exists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 30
                  example: Aldous Huxley
                description:
                  type: string
                  maxLength: 500
                  example: Something about his biography.
                avatarId:
                  description: The image id in the database
                  type: integer
                  example: 10533
                  
      tags:
        - Book Authors
  /author/{authorId}:
    get:
      summary: Get an author page
      description: 'A complete author page, with books from author'
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
      operationId: getAuthorById
      security: []
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                properties:
                  name:
                    type: string
                    example: George R.R. Washington
                  description:
                    type: string
                    example: A novelist who wrote the script for the famous movie, The Ring.
                  avatar:
                    type: string
                    example: image/author-avatar/123124.jpg
                    description: The url of his avatar. Large-sized.
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookItem'

        403:
          description: User not authorized
        404:
          description: Author not found

      tags:
        - Book Authors
  /auth/author/{authorId}:
    patch:
      summary: Update an author
      description: 'Update author biography, name, aliases'
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: New author name
                description:
                  type: string
                  example: Some modified author description.
                avatar:
                  type: integer
                  description: The image id in the database.
      operationId: updateAuthorById
      responses:
        200:
          description: Updated successfully
        403:
          description: User not authorized
        404:
          description: Author not found
        409:
          description: Conflict when updating author
      tags:
        - Book Authors
    delete:
      summary: Delete an author
      description: Delete an author by id
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer

      operationId: deleteAuthorById
      responses:
        200:
          description: Deleted successfully
        403:
          description: User not authorized
        404:
          description: Author not found
        
      tags:
        - Book Authors
  /auth/upload/{imageCategory}:
    post:
      summary: Upload a new image from file
      description: Upload a new image, can be a user avatar / author avatar / chapter image content / cover art
      parameters:
        - name: imageCategory
          in: path
          required: true
          schema:
            type: string
            enum:
              - chapter-image
              - user-avatar
              - author-avatar
              - genre-image
              - cover-art
      operationId: uploadImage
      responses:
        200:
          description: Uploaded successfully
          content:
            application/json:
              schema:
                type: object
                description: The image id from the database
                properties:
                  id:
                    type: integer
                    example: 1231

        403:
          description: User not authorized
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              
      tags:
        - Images
  /image/{path}:
    get:
      summary: Get image from server
      description: Get image from server disk, with given location. (technically, `/image/{path}` should point to `/static/images/{path}` in disk)
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
            example: cover-art/9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d.jpg
      operationId: getImage
      security: []
      responses:
        200:
          description: OK
          content:
            image:
              schema:
                type: string
                format: binary
        404:
          description: Image not found
      tags:
        - Images
  /genre/all:
    get:
      summary: Get genre list from server
      description: List all possible book genres
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Lãng mạn
                    id:
                      type: integer
                      example: 5
      tags:
       - Book Genres
  /genre/{genreId}:
    get:
      summary: Get book list by genre 
      description: List books from a genre with pagination
      parameters:
        - name: genreId
          in: path
          required: true
          schema:
            type: string
            example: cover-art/9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d.jpg
        - name: page
          $ref: '#/components/parameters/Page'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  lastPage:
                    $ref: '#/components/schemas/LastPage'
                  books:
                    type: array
                    description: Books in a dedicated search page
                       have more information than when searching.
                    items:
                      $ref: '#/components/schemas/BookItemFull'
        404:
          description: Genre not found
      tags:
       - Book Genres
      
tags:
  - name: Users
    description: For all user related operations.
  - name: Book Groups
    description: Representing folders for book chapters (can also be called book titles).
  - name: Book Chapters
    description: May hold hypertext content or images
  - name: Book Comments
    description: User comments on book groups or book chapters
  - name: Book Authors
    description: People who write books (one book may have multiple authors)
  - name: Book Genres
    description: Function for inserting, finding books group by genres.
  - name: Images 
    description: Functions for uploading, querying image

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt
  links: {}
  callbacks: {}
  parameters:
    Page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        default: 1
      description: May clamp to first/last page for better ux (page <= 0, page = 9999)
    BookGroupId:
      name: bookGroupId
      in: query
      description: If included, ``bookChapterId`` is not required.

      schema:
        type: integer
    BookChapterId:
      name: bookChapterId
      in: query
      description: If included, ``bookGroupId`` is not required.
      schema:
        type: integer
  schemas:
    OauthProvider:
      type: string
      enum:
        - google
    Username:
      type: string
      minLength: 6
      maxLength: 20
      example: Ngdùng W1Bu ／人 ◕ ‿‿ ◕ 人＼
    Password:
      type: string
      minLength: 8
      maxLength: 50
      example: t3stPAS!dảk
    UserRole:
      type: string
      example: member
      enum: [oauth_incomplete, member, moderator, admin]
    RolePermissions:
      type: array
      example: [comment.read, author.read]
      description: Front-end should implement view display strategy according to these enums.
      enum: [comment.read, comment.post, comment.modify, 
        comment.modifySelf, comment.deleteSelf, comment.delete,
        book.read, book.post, book.modifySelf, 
        book.modify, book.deleteSelf, book.delete,
        chapter.read, chapter.post, chapter.modifySelf, 
        chapter.modify, chapter.deleteSelf, chapter.delete
        author.read, author.post, author.modify, author.delete
        user.readSelf, user.read, userPrivate.read
        ]
    BookItem:
      type: object
      required:
        - title
        - url
        - thumbnail
      properties:
        title:
          type: string
          example: TLOTR
        id:
          type: integer
          description: The id of the book
          example: 12311
        thumbnail:
          description: The url of the book thumbnail. Middle-sized.
          type: string
          example: /image/book/s/25-232321-1231.jpg
    LastPage:
      type: integer
      description: The last page number for pagination purposes
      example: 15
    BookItemFull:
      type: object
      properties:
        id:
          type: integer
          description: Book group id
          example: 1231
        thumbnail:
          description: A medium-sized thumbnail
          type: string
          example: /image/cover-art/anh.jpg.256.jpg
        title:
          type: string
          example: Boku no pico
        latestChapter:
          type: number
          example: 16.5
        comments:
          description: Number of comments
          type: integer
          example: 105
        views:
          description: Number of views
          type: integer
          example: 15324
        likes:
          description: The result of likes minus dislikes.
          type: integer
          example: 24


security:
  - cookieAuth: []