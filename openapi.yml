openapi: 3.0.2
info:
  title: Novo App
  version: '1.0'
  description: >-
    A book server that serves all kinds of books (novels, comics, manga and
    whatnots)
  contact: {}
servers:
  - url: 'http://localhost:7001'
paths:
  '/oauth/{provider}':
    get:
      summary: OAuth login initialize
      description: Redirects client to OAuth provider page for 3-legged authentication.
      responses:
        '302':
          description: Redirect to the provider page
        '404':
          description: Provider not found
      tags:
        - Users
      parameters: []
      operationId: goToOauthProvider
  /login:
    post:
      summary: Password login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                usernameOrEmail:
                  type: string
                  example: Người dùng X
                  minLength: 6
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: Successful login
        '401':
          description: Invalid credentials
      tags:
        - Users
      parameters: []
      operationId: loginByOauthCode
    get:
      summary: Oauth login
      description: >
        Client goes to this page after having received the oauth code from
        provider (Google). It's performed automatically.
      parameters:
        - name: provider
          in: path
          required: true
          description: The provider of the OAuth service.
          schema:
            type: string
            enum:
              - google
        - name: code
          in: path
          required: true
          description: >
            Code received after the client has successfully been verified by the OAuth
            provider side. (Embedded in the redirect link)
          schema:
            type: string
      responses:
        '200':
          description: Login success
        '401':
          description: Invalid credentials
        '404':
          description: Provider not found
      tags:
        - Users
      operationId: loginByPassword
  '/search-suggest/{query}':
    get:
      summary: Search suggestion
      description: Suggestion when typing text in the search box.
      parameters:
        - name: query
          in: path
          required: true
          schema:
            type: string
            example: solo lev
            maxLength: 100

      responses:
        '200':
          description: Empty list also returns 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    description: A suggestion list of books when searching.
                    items:
                      type: object
                      properties:
                        thumbnail:
                          description: A small-sized thumbnail
                          type: string
                          example: anh.jpg
                        title:
                          type: string
                          description: Book title
                          example: Boku no pico
                        latestChapter:
                          type: number
                          description: The highest number chapter
                          example: 16.5
      tags:
        - Book Groups
      operationId: searchSuggestion
  '/search/{query}':
    get:
      summary: Search result
      description: Result page containing book groups after hitting enter.
      parameters:
        - name: query
          in: path
          required: true
          schema:
            type: string
            example: solo leveling
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: May clamp to first/last page for better ux (page <= 0, page = 9999)
      operationId: getSearchResult
      responses:
        200:
          description: Query success
          content:
            application/json:
              schema:
                type: object
                properties:
                  lastPage:
                    type: integer
                    description: The last page number for pagination purposes
                    example: 15
                  books:
                    type: array
                    description: Books in a dedicated search page
                       have more information than when searching.
                    items:
                      type: object
                      properties:
                        thumbnail:
                          description: A medium-sized thumbnail
                          type: string
                          example: anh.jpg
                        title:
                          type: string
                          example: Boku no pico
                        latestChapter:
                          type: number
                          example: 16.5
                        comments:
                          description: Number of comments
                          type: integer
                          example: 105
                        views:
                          description: Number of views
                          type: integer
                          example: 15324
                        likes:
                          description: The result of likes minus dislikes.
                          type: integer
                          example: 24
      tags:
        - Book Groups
  '/chapter/{chapterId}':
    get:
      summary: Get chapter page content
      description: |-
        All necessary content for displaying a chapter page.
        There are links to the previous and next chapter
      parameters:
        - name: chapterId
          in: path
          required: true
          schema:
            type: string
          description: Id of a chapter from the database
      operationId: getChapterByChapterId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      type:
                        type: string
                        example: images
                        enum:
                          - images
                      images:
                        type: array
                        description: A list of image urls
                        items:
                          type: string
                      nextChapter:
                        description: Url to the next chapter
                        type: string
                      prevChapter:
                        description: Url to the previous chapter
                        type: string
                    required:
                      - type
                      - images
                  - type: object
                    required:
                      - type
                      - textContent
                    properties:
                      type:
                        type: string
                        example: hypertext
                        enum:
                          - hypertext
                      textContent:
                        type: string
                        example: Call me Ishmael. Some years ago...
                        description: The content for a text chapter (may contain markdown formattting)
                      nextChapter:
                        description: Url to the next chapter
                        type: string
                      prevChapter:
                        description: Url to the previous chapter
                        type: string
        404:
          description: Chapter not found
      security: []
      tags:
        - Book Chapters
    delete:
      summary: Delete a book chapter
      description: ''
      parameters:
        - name: chapterId
          in: path
          schema:
            type: number
          required: true
      operationId: deleteChapterByChapterId
      responses:
        '200':
          description: Deleted successfully
        '403':
          description: Forbidden
        '404':
          description: Can't find book chapter
      tags:
        - Book Chapters
    # patch:
    #   summary: Update book chapter content
    #   description: ''
    #   parameters: []
    #   operationId: updateChapterByChapterId
    #   responses:
    #     default:
    #       description: Default response
    #   tags:
    #     - Book Chapters
  /chapter/:
    post:
      summary: Post a new chapter
      description: A new book chapter to be posted, must belong to a book group.
      parameters: []
      operationId: postNewChapter
      responses:
        default:
          description: Default response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - bookGroupId
                    - chapterNumber
                    - type
                    - textContent
                  properties:
                    bookGroupId:
                      type: integer
                      example: 25
                    chapterNumber:
                      type: number
                      example: 6.8
                    type:
                      type: string
                      enum: [hypertext]
                    textContent:
                      description: The hypertext content of the chapter.
                      type: string
                      example: "Some book content. Once upon..."
                - type: object
                  required:
                    - bookGroupId
                    - chapterNumber
                    - type
                    - images
                  properties:
                    bookGroupId:
                      type: integer
                      example: 25
                    chapterNumber:
                      type: number
                      example: 6.8
                    type:
                      type: string
                      enum: [images]
                    images:
                      description: IDs of images after uploaded to the server.
                      type: array
                      items:
                        type: integer
      tags:
        - Book Chapters
  '/like/{bookGroupId}':
    get:
      summary: Get like count of a book group
      description: This gets the like and dislike count of a book group
      parameters: []
      operationId: getLikeAndDislikeCountByBookGroupId
      responses:
        default:
          description: Default response
      tags:
        - Book Groups
    post:
      summary: Like operations on a book group
      description: Like/dislike/or unlike operation by a user for a book group
      parameters: []
      operationId: likeOperationsForBookGroup
      responses:
        default:
          description: Default response
      tags:
        - Book Groups
  '/comments/{bookId}':
    get:
      summary: Get comments from a book group
      description: >-
        Contains all comments from chapters in this group and all chapter
        unspecified comments
      parameters: []
      operationId: getCommentsByBookGroupId
      responses:
        default:
          description: Default response
      tags:
        - Book Comments
    post:
      summary: Post a comment in a book group
      description: Create a comment that isn't chapter specific
      parameters: []
      operationId: postCommentByBookGroupId
      responses:
        default:
          description: Default response
      tags:
        - Book Comments
  /comments:
    delete:
      summary: Delete a book comment
      description: Doesn't need a specific book group. Id is global among all groups
      parameters: []
      operationId: deleteCommentById
      responses:
        default:
          description: Default response
      tags:
        - Book Comments
    patch:
      summary: Update a book comment
      description: Doesn't need a specific book group. Id is global among all groups
      parameters: []
      operationId: updateCommentById
      responses:
        default:
          description: Default response
      tags:
        - Book Comments
  '/comment/{bookGroupId}':
    get:
      summary: Get comments from a book chapter
      description: ''
      parameters: []
      operationId: getCommentsByChapterId
      responses:
        '200':
          description: Default response
          content:
            application/json:
              schema: {}
      tags:
        - Book Comments
      security: []
    post:
      summary: Post a comment to a book chapter
      description: ''
      parameters: []
      operationId: postCommentByChapterId
      responses:
        default:
          description: Default response
      tags:
        - Book Comments
  '/user/{userId}':
    get:
      summary: Get public user info
      description: 'Get public user info (i.e., username, books posted, profile, avatar )'
      parameters: []
      operationId: getUserInfoById
      responses:
        default:
          description: Default response
      tags:
        - Users
  /register:
    post:
      summary: Register a new user (password)
      description: Register a new user with password, username, and email. An alternative workflow 
        is that user signs up/logs in with their account from an OAuth provider.
      parameters: []
      operationId: registerANewUser
      responses:
        default:
          description: Default response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Must be at least 6 characters, not starting with a space, may contain at most 1 white spaces between characters, may contain special characters except control characters and line break characters. 
                  example: Người dùng W1B00 ／人 ◕ ‿‿ ◕ 人＼
                email:
                  type: string
                  example: example@example.com
                  description: Standards compliant.
                password:
                  type: string
                  description: Must be at least 8 characters
                  example: A!B2Ce%%
              required: [username, email, password]
      tags:
        - Users
  '/author/{authorId}':
    get:
      summary: Get an author page
      description: 'A complete author page, with books from author'
      parameters: []
      operationId: getAuthorById
      responses:
        default:
          description: Default response
      tags:
        - Book Authors
    patch:
      summary: Update an author
      description: 'Update author biography, name, aliases'
      parameters: []
      operationId: updateAuthorById
      responses:
        default:
          description: Default response
      tags:
        - Book Authors
    delete:
      summary: Delete an author
      description: Delete an author by id
      parameters: []
      operationId: deleteAuthorById
      responses:
        default:
          description: Default response
      tags:
        - Book Authors
  '/author':
    post:
      summary: Create a new author
      description: 'A complete author page, with books from author'
      parameters: []
      operationId: createAuthor
      responses:
        default:
          description: Default response
      tags:
        - Book Authors
  /complete-oauth-register:
    post:
      summary: Complete OAuth registration
      description: >-
        User type in the username and maybe change their default profile picture
        to complete registration
      parameters: []
      operationId: completeOauthRegister
      responses:
        default:
          description: Default response
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/Username'
      tags:
        - Users
tags:
  - name: Users
    description: For all user related operations.
  - name: Book Groups
    description: Representing folders for book chapters (can also be called book titles).
  - name: Book Chapters
    description: May hold hypertext content or images
  - name: Book Comments
    description: User comments on book groups or book chapters
  - name: Book Authors
    description: People who write books (one book may have multiple authors)
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
  schemas:
    Username:
      type: string
      minLength: 6
      maxLength: 20
      example: Ngdùng W1Bu ／人 ◕ ‿‿ ◕ 人＼
    Password:
      type: string
      minLength: 8
      maxLength: 50
      example: t3stPAS!dảk

security:
  - bearerAuth: []